{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","robot","key","id","className","alt","src","name","email","CardList","robots","map","SearchBox","searchText","onSearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","errorInfo","this","setState","Component","App","event","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","React","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCHSC,G,MAZF,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACX,OACG,yBAAKC,IAAKD,EAAME,GAAIC,UAAU,gDAC3B,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAAMM,KAAhC,cACrB,6BACG,wBAAIH,UAAU,aAAaH,EAAMM,MACjC,2BAAIN,EAAMO,WCERC,EARE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACG,6BACIA,EAAOC,KAAI,SAACV,GAAD,OAAW,kBAAC,EAAD,CAAMC,IAAKD,EAAME,GAAIF,MAAOA,SCS9CW,EAbG,SAAC,GAAiC,EAAhCC,WAAiC,IAArBC,EAAoB,EAApBA,eAC7B,OACG,yBAAKV,UAAU,OACZ,2BACGA,UAAU,uBACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCPI,EARA,SAACC,GACb,OACG,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,mBAAoBC,OAAQ,UAClEJ,EAAMK,WCiBDC,E,YAnBZ,aAAe,IAAD,8BACX,+CACKC,MAAQ,CACVC,UAAU,GAHF,E,+EAOIC,EAAOC,GACtBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACL,uCAEHG,KAAKX,MAAMK,a,GAhBIQ,aC6CbC,G,kBAvCZ,aAAe,IAAD,8BACX,+CAaHnB,eAAiB,SAACoB,GACf,EAAKH,SAAS,CAAElB,WAAYqB,EAAMC,OAAOC,SAbzC,EAAKV,MAAQ,CACVhB,OAAQ,GACRG,WAAY,IAJJ,E,iFAQO,IAAD,OACjBwB,MAAM,8CACFC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACrB,OAAQ+B,S,+BAOlC,IAAD,EACyBX,KAAKJ,MAA5BhB,EADF,EACEA,OAAQG,EADV,EACUA,WACV6B,EAAiBhC,EAAOiC,QAAO,SAAC1C,GACnC,OAAOA,EAAMM,KAAKqC,cAAcC,SAAShC,EAAW+B,kBAEvD,OAAQlC,EAAOoC,OAGT,yBAAK1C,UAAU,MACZ,wBAAIA,UAAU,QAAd,YACA,kBAAC,EAAD,CAAWU,eAAgBgB,KAAKhB,iBAChC,kBAAC,EAAD,KACG,kBAAC,EAAD,KACG,kBAAC,EAAD,CAAUJ,OAAQgC,OAP9B,6C,GAzBSK,IAAMf,YCAxBgB,IAASC,OACN,kBAAC,EAAD,MACAC,SAASC,eAAe,SPwHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,kB","file":"static/js/main.dee9e4dc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport './Card.css';\n\nconst Card = ({robot}) => {\n    return (\n       <div key={robot.id} className='tc dib br3 pa3 ma2 grow bw2 shadow-5 card-bg'>\n          <img alt='robots' src={`https://robohash.org/${robot.name}?100x100`} />\n          <div>\n             <h2 className='card-text'>{robot.name}</h2>\n             <p>{robot.email}</p>\n          </div>\n       </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    return (\n       <div>\n          {robots.map((robot) => <Card key={robot.id} robot={robot} />)}\n       </div>\n    );\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchText, onSearchChange}) => {\n   return (\n      <div className='pa2'>\n         <input\n            className='tc br3 pa3 ma2 bw0-l'\n            type='search'\n            placeholder='Search robots'\n            onChange={onSearchChange}\n         />\n      </div>\n   );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n   return (\n      <div style={{overflowY: 'scroll', border: '1px sold #05386b', height: '800px'}}>\n         {props.children}\n      </div>\n   );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n   constructor() {\n      super();\n      this.state = {\n         hasError: false\n      }\n   }\n\n   componentDidCatch(error, errorInfo) {\n      this.setState({ hasError: true });\n   }\n\n   render() {\n      if (this.state.hasError) {\n         return <h1>Oops...</h1>\n      }\n      return this.props.children;\n   }\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport CardList from \"../components/CardList\";\nimport SearchBox from '../components/SearchBox';\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport './App.css';\n\nclass App extends React.Component {\n   constructor() {\n      super();\n      this.state = {\n         robots: [],\n         searchText: ''\n      }\n   }\n\n   componentDidMount() {\n      fetch('https://jsonplaceholder.typicode.com/users')\n         .then(response => response.json())\n         .then(users => this.setState({robots: users}));\n   }\n\n   onSearchChange = (event) => {\n      this.setState({ searchText: event.target.value });\n   }\n\n   render() {\n      const { robots, searchText } = this.state;\n      const filteredRobots = robots.filter((robot) => {\n         return robot.name.toLowerCase().includes(searchText.toLowerCase());\n      });\n      return !robots.length ?\n         <p>Loading...</p> :\n         (\n            <div className='tc'>\n               <h1 className='logo'>RoboCool</h1>\n               <SearchBox onSearchChange={this.onSearchChange} />\n               <Scroll>\n                  <ErrorBoundary>\n                     <CardList robots={filteredRobots} />\n                  </ErrorBoundary>\n               </Scroll>\n            </div>\n         );\n   }\n};\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(\n   <App />,\n   document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}