{"version":3,"sources":["serviceWorker.js","components/Card/Card.js","components/CardList/CardList.js","components/SearchBox/SearchBox.js","components/Scroll/Scroll.js","components/ErrorBoundary/ErrorBoundary.js","containers/App/App.js","components/SearchBox/actions.js","components/SearchBox/constants.js","containers/App/actions.js","containers/App/constants.js","components/SearchBox/reducers.js","containers/App/reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","robot","key","id","className","alt","src","name","email","CardList","robots","map","SearchBox","searchText","onSearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","errorInfo","this","setState","Component","App","onRequestRobots","isPending","filteredRobots","filter","toLowerCase","includes","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearchRobots","initialStateRequestRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b23eb4ca.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport './Card.css';\n\nconst Card = ({robot}) => {\n    return (\n       <div key={robot.id} className='tc dib br3 pa3 ma2 grow bw2 shadow-5 card-bg'>\n          <img alt='robots' src={`https://robohash.org/${robot.name}?100x100`} />\n          <div>\n             <h3 className='card-text'>{robot.name}</h3>\n             <p>{robot.email}</p>\n          </div>\n       </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from '../Card/Card';\n\nconst CardList = ({robots}) => {\n    return (\n       <div>\n          {robots.map((robot) => <Card key={robot.id} robot={robot} />)}\n       </div>\n    );\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchText, onSearchChange}) => {\n   return (\n      <div className='pa2'>\n         <input\n            className='tc br3 pa2 ma2 bw0-l'\n            type='search'\n            placeholder='Search robots'\n            onChange={onSearchChange}\n         />\n      </div>\n   );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n   return (\n      <div style={{overflowY: 'scroll', border: '1px sold #05386b', height: '800px'}}>\n         {props.children}\n      </div>\n   );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n   constructor() {\n      super();\n      this.state = {\n         hasError: false\n      }\n   }\n\n   componentDidCatch(error, errorInfo) {\n      this.setState({ hasError: true });\n   }\n\n   render() {\n      if (this.state.hasError) {\n         return <h1>Oops...</h1>\n      }\n      return this.props.children;\n   }\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport {connect} from 'react-redux';\nimport CardList from \"../../components/CardList/CardList\";\nimport SearchBox from '../../components/SearchBox/SearchBox';\nimport Scroll from \"../../components/Scroll/Scroll\";\nimport ErrorBoundary from \"../../components/ErrorBoundary/ErrorBoundary\";\nimport './App.css';\n\nimport {setSearchText} from '../../components/SearchBox/actions';\nimport {requestRobotsApi} from './actions';\n\nconst mapStateToProps = state => {\n   return {\n      searchText: state.searchRobots.searchText,\n      isPending: state.requestRobots.isPending,\n      robots: state.requestRobots.robots,\n      error: state.requestRobots.robots\n   }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n   return  {\n      onSearchChange: (event) => dispatch(setSearchText(event.target.value)),\n      onRequestRobots: () => dispatch(requestRobotsApi())\n   }\n}\n\nclass App extends React.Component {\n   componentDidMount() {\n      this.props.onRequestRobots();\n   }\n\n   render() {\n      const { searchText, onSearchChange, robots, isPending } = this.props;\n      const filteredRobots = robots.filter((robot) => {\n         return robot.name.toLowerCase().includes(searchText.toLowerCase());\n      });\n      return isPending?\n         <p>Loading...</p> :\n         (\n            <div className='tc'>\n               <h1 className='logo'>RoboCool</h1>\n               <SearchBox onSearchChange={onSearchChange} />\n               <Scroll>\n                  <ErrorBoundary>\n                     <CardList robots={filteredRobots} />\n                  </ErrorBoundary>\n               </Scroll>\n            </div>\n         );\n   }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","import { CHANGE_SEARCH_TEXT } from './constants';\n\nexport const setSearchText = (text) => ({\n   type: CHANGE_SEARCH_TEXT,\n   payload: text\n})","export const CHANGE_SEARCH_TEXT = 'CHANGE_SEARCH_TEXT';","import {\n   REQUEST_ROBOTS_PENDING,\n   REQUEST_ROBOTS_SUCCESS,\n   REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const requestRobotsApi = () => (dispatch) => {\n   dispatch({type: REQUEST_ROBOTS_PENDING});\n   fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n      .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}));\n}","export const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED  = 'REQUEST_ROBOTS_FAILED';","import {CHANGE_SEARCH_TEXT} from './constants';\n\nconst initialStateSearchRobots = {\n   searchText: ''\n}\n\nexport const searchRobots = (state=initialStateSearchRobots, action={}) => {\n   switch (action.type) {\n      case CHANGE_SEARCH_TEXT:\n         return Object.assign({}, state, {searchText: action.payload});\n      default :\n         return state;\n   }\n}","import {\n   REQUEST_ROBOTS_PENDING,\n   REQUEST_ROBOTS_SUCCESS,\n   REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateRequestRobots = {\n   isPending: false,\n   robots: [],\n   error: ''\n}\n\nexport const requestRobots = (state=initialStateRequestRobots, action={}) => {\n   switch (action.type) {\n      case REQUEST_ROBOTS_PENDING:\n         return Object.assign({}, state, {isPending: true});\n      case REQUEST_ROBOTS_SUCCESS:\n         return Object.assign({}, state, {robots: action.payload, isPending: false});\n      case REQUEST_ROBOTS_FAILED:\n         return Object.assign({}, state, {error: action.payload, isPending: false});\n      default:\n         return state;\n   }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App/App';\nimport {searchRobots} from './components/SearchBox/reducers';\nimport {requestRobots} from './containers/App/reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n   <Provider store={store}>\n      <App />\n   </Provider>,\n   document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}